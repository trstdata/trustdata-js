(()=>{const e="attribution_core_queue";async function t(e,t){try{const a=await s();return a.events.push({endpoint:e,payload:t,timestamp:Date.now(),retries:0}),await n(a),!0}catch(e){return!1}}async function s(){try{const t=(await a()).transaction(["events"],"readonly").objectStore("events").get(e);return new Promise(((e,s)=>{t.onsuccess=()=>{const s=t.result||{events:[]};e(s)},t.onerror=()=>{t.error,s(t.error)}}))}catch(e){return{events:[]}}}async function n(t){try{const s=(await a()).transaction(["events"],"readwrite").objectStore("events").put(t,e);return new Promise(((e,t)=>{s.onsuccess=()=>{e(!0)},s.onerror=()=>{s.error,t(s.error)}}))}catch(e){return!1}}function a(){return new Promise(((e,t)=>{const s=indexedDB.open("AttributionCoreDB",1);s.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains("events")||t.createObjectStore("events")},s.onsuccess=t=>{const s=t.target.result;e(s)},s.onerror=e=>{s.error,t(s.error)}}))}async function r(){try{const e=await s();if(!e.events||0===e.events.length)return 0;e.events.length;let t=0;const a=[];for(const s of e.events)if(s.retries>=5);else try{await o(s.endpoint,s.payload)?t++:(s.retries++,a.push(s))}catch(e){s.retries++,a.push(s)}return e.events=a,await n(e),a.length,t}catch(e){return 0}}async function o(e,t){try{const s=Object.entries(t).map((([e,t])=>Array.isArray(t)?t.map((t=>`${encodeURIComponent(e)}=${encodeURIComponent(t)}`)).join("&"):`${encodeURIComponent(e)}=${encodeURIComponent(t)}`)).join("&");return await fetch(`${e}?${s}`,{method:"POST",mode:"no-cors",cache:"no-cache",credentials:"omit",headers:{"Content-Type":"text/plain;charset=UTF-8"},referrerPolicy:"no-referrer",body:""}),!0}catch(e){return!1}}self.addEventListener("install",(e=>{e.waitUntil(self.skipWaiting())})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if("attribution-core-cache-v1"!==e)return caches.delete(e)}))))).then((()=>self.clients.claim())))})),self.addEventListener("sync",(e=>{"attribution-core-sync"===e.tag&&e.waitUntil(r())})),self.addEventListener("message",(e=>{e.data;const{action:a,messageId:c}=e.data||{};a&&("recordEvent"===a?e.waitUntil(async function(e){const{endpoint:s,payload:n,messageId:a}=e.data;try{if(!(self.navigator?.onLine??1))return await t(s,n),{messageId:a,success:!1,queued:!0,offline:!0,timestamp:Date.now()};try{return await o(s,n)?{messageId:a,success:!0,timestamp:Date.now()}:(await t(s,n),{messageId:a,success:!1,queued:!0,timestamp:Date.now()})}catch(e){return await t(s,n),{messageId:a,success:!1,queued:!0,error:e.message,timestamp:Date.now()}}}catch(e){return{messageId:a,success:!1,queued:!1,error:e.message,timestamp:Date.now()}}}(e).then((t=>{e.source&&e.source.postMessage(t)}))):"processQueue"===a?e.waitUntil(r().then((t=>{e.source&&e.source.postMessage({messageId:c,action:"processQueueResult",processedCount:t,timestamp:Date.now()})}))):"getQueueStatus"===a?e.waitUntil(s().then((t=>{e.source&&e.source.postMessage({messageId:c,action:"queueStatus",count:t.events?t.events.length:0,timestamp:Date.now()})}))):"clearQueue"===a?e.waitUntil(n({events:[]}).then((()=>{e.source&&e.source.postMessage({messageId:c,action:"queueCleared",success:!0,timestamp:Date.now()})}))):"ping"===a&&e.source&&e.source.postMessage({messageId:c,action:"pong",timestamp:Date.now()}))})),self.addEventListener("fetch",(e=>{const s=new URL(e.request.url);if("/g/collect"===s.pathname&&("www.google-analytics.com"===s.hostname||"analytics.google.com"===s.hostname)){const n=e.request.clone();e.respondWith(fetch(e.request.clone()).catch((e=>n.text().then((e=>{const n=s.origin+s.pathname,a={};for(const[e,t]of s.searchParams.entries())a[e]=t;return t(n,a),new Response("",{status:200,statusText:"OK"})})))))}})),self.addEventListener("periodicsync",(e=>{"attribution-core-sync"===e.tag&&e.waitUntil(r())})),self.addEventListener("push",(e=>{e.data&&"process-queue"===e.data.json().action&&e.waitUntil(r())})),self.addEventListener("activate",(e=>{e.waitUntil(Promise.all([void("sync"in self.registration&&self.registration.sync.register("attribution-core-sync").then((()=>{})).catch((e=>{}))),void("periodicSync"in self.registration&&self.registration.periodicSync.register("attribution-core-sync",{minInterval:108e5}).then((()=>{})).catch((e=>{}))),self.clients.claim()]))})),self.addEventListener("install",(e=>{e.waitUntil(Promise.all([self.skipWaiting(),s().then((e=>{if(e.events&&e.events.length>0){const t=Date.now()-12096e5;return e.events=e.events.filter((e=>e.timestamp>t)),n(e)}}))]))}))})();